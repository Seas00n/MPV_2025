"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class impedance_info(object):
    __slots__ = ["para_phase1", "para_phase2", "para_phase3", "para_phase4", "velocity_estimated", "slope_estimated", "para_jerk"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[6], [6], [6], [6], None, None, [6]]

    def __init__(self):
        self.para_phase1 = [ 0.0 for dim0 in range(6) ]
        self.para_phase2 = [ 0.0 for dim0 in range(6) ]
        self.para_phase3 = [ 0.0 for dim0 in range(6) ]
        self.para_phase4 = [ 0.0 for dim0 in range(6) ]
        self.velocity_estimated = 0.0
        self.slope_estimated = 0.0
        self.para_jerk = [ 0.0 for dim0 in range(6) ]

    def encode(self):
        buf = BytesIO()
        buf.write(impedance_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>6d', *self.para_phase1[:6]))
        buf.write(struct.pack('>6d', *self.para_phase2[:6]))
        buf.write(struct.pack('>6d', *self.para_phase3[:6]))
        buf.write(struct.pack('>6d', *self.para_phase4[:6]))
        buf.write(struct.pack(">dd", self.velocity_estimated, self.slope_estimated))
        buf.write(struct.pack('>6d', *self.para_jerk[:6]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != impedance_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return impedance_info._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = impedance_info()
        self.para_phase1 = struct.unpack('>6d', buf.read(48))
        self.para_phase2 = struct.unpack('>6d', buf.read(48))
        self.para_phase3 = struct.unpack('>6d', buf.read(48))
        self.para_phase4 = struct.unpack('>6d', buf.read(48))
        self.velocity_estimated, self.slope_estimated = struct.unpack(">dd", buf.read(16))
        self.para_jerk = struct.unpack('>6d', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if impedance_info in parents: return 0
        tmphash = (0xf5589b4fa2468c7c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if impedance_info._packed_fingerprint is None:
            impedance_info._packed_fingerprint = struct.pack(">Q", impedance_info._get_hash_recursive([]))
        return impedance_info._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", impedance_info._get_packed_fingerprint())[0]

